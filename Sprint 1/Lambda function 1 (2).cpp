/*
Задание 2
В стандартном потоке дана одна строка, которая состоит из числа N и следующего за ним набора S из N слов. Число отделено от слов пробелом.
Отсортируйте набор слов S в алфавитном порядке по возрастанию, игнорируя регистр букв. Выведите их в стандартный поток вывода через пробел. 
При сравнении слов цифры должны предшествовать буквам: слово «R2D2» находится после слова «R259», так как цифра 5 предшествует любой из букв.
После последнего слова также выведите пробел, а затем перевод строки.
Ознакомьтесь с функцией tolower и алгоритмом lexicographical_compare, чтобы отсортировать слова в алфавитном порядке без учета регистра символов.
Как будет тестироватьс¤ ваша программа
Гарантируется, что входные данные программы удовлетворяют следующим услови¤м:
0 <= N <= 1000;
1 <= |S[i]| <= 15;
каждое слово S[i] содержит только цифры, заглавные и строчные буквы английского алфавита;
в наборе слов S нет слов, которые отличаются только регистром символов, например: «apple» и «Apple».
Пример
Ввод
8 quantity AMOUNT Selection Search 4ever music Mickey market 
Вывод
4ever AMOUNT market Mickey music quantity Search Selection 

Прочитайте слова в вектор, а потом отсортируйте их алгоритмом sort. По умолчанию sort сравнивает элементы операцией <, 
которая для строк учитывает регистр символов. Чтобы сравнивать слова без учёта регистра символов, передайте алгоритму sort компаратор.
В этом компараторе сравнивайте строки алгоритмом lexicographical_compare. Чтобы lexicographical_compare игнорировал регистр символов, 
передайте этому алгоритму компаратор, который перед сравнением приводит символы к нижнему регистру функцией tolower.
*/
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>


using namespace std;

bool helper2(char ca, char cb)
{
    return tolower(ca) < tolower(cb);
}

bool helper(const string& a, const string& b)
{
    return lexicographical_compare(begin(a), end(a), begin(b), end(b), helper2);
}


int main()
{
    // считайте входные данные и сформируйте вывод программы
    // ...
    int size;
   
    vector <string> s;
    cin >> size;

    for (int i = 0; i < size; i++)
    {        
        string w;
        cin >> w;
        s.push_back(w);
    }
       
    
    sort (s.begin(), s.end(), helper);

    for (int i = 0; i < size; ++i) {
        
        cout << s[i] << ' ';
    }
   
    cout << endl;
}
